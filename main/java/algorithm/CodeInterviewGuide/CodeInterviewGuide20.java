package algorithm.CodeInterviewGuide;

import java.util.Scanner;

/**
 * <p>
 * 【打气球的最大分数】
 * <p>
 * <p>
 * 题目描述
 * 给定一个数组arr,长度为n。代表排有分数的气球。 每打爆一个气球都能获得分数，假设打爆气球的分数为X，获得分数的规则如下:
 * 1)如果被打爆气球的左边有没被打爆的气球，找到离被打爆气球最近的气球，假设分数为L:如果被打爆气球的右边有没被打爆的气球，找到离被打爆气球最近的气球，假设分数为R.获得分数为L*X*R
 * 2)如果被打爆气球的左边有没被打爆的气球，找到离被打爆气球最近的气球，假设分数为L:如果被打爆气球的右边所有气球都已经被打爆，获得分数为L*X。
 * 3)如果被打爆气球的左边所有的气球都已经被打爆:如果被打爆气球的右边有没被打爆的气球，找到离被打爆气球最近的气球。获得分数为X*R.
 * 4)如果被打爆气球的左边和右边所有的气球都已经被打爆。获得分数为X。
 * 目标是打爆所有气球，获得每次打爆的分数。通过选择打爆气球的顺序，可以得到不同的总分，请返回能获得的最大分数。
 * 输入描述:
 * 输出包括两行，第一行包括一个整数n（0<=n<=500），第二行包括n个整数，代表数组arr （1<=arr[i]<=100）。
 * 输出描述:
 * 输出包括一个整数，代表可能获得的最大分数。
 * 示例1
 * 输入
 * 复制
 * 3
 * 3 2 5
 * 输出
 * 50
 * 说明
 * 2->1->3  3*2*5+3*5+5=50
 * 示例2
 * 输入
 * 8
 * 23 4 45 65 23 43 54 56
 * 输出
 * 639019
 * 备注:
 * 时间复杂度O(n^{3})
 * 空间复杂度O(n^{2})
 *
 * @author: 小栗旬
 * @Date: 2019/8/29 9:54
 */
public class CodeInterviewGuide20 {

    /*
    【动态规划】
    1.在一个数组中取某个点的值会受到该点左右两边的点的影响，并且在取到这个点之后和未取到这个点的时候情况是不一样的；
    2.假设在[left,right]中，mid是中间的某一个点，mid的取值会受到[left,mid]和[mid,right]的影响，我们要取到left，right的所有情况。
    一般来说就是两次遍历，right不断往后移动，然后left从0开始移动到right，但是这种算法不适用该情况，因为我们在left的移动过程中，无法知道[mid.right]的值；
    在这样的情况下，我们考虑让left从right开始不断移动到0，这样[mid,right]就是从[right,right]开始可以计算得到，而[left,mid]的结果在上一层right遍历的时候就已经得到

    3.
     */

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = new int[n + 2];

        nums[0] = 1;
        for (int i = 1; i <= n; i++) {
            nums[i] = scanner.nextInt();
        }
        nums[n + 1] = 1;
        //dp表示从第i个点到第j个点能取得的最高分数
        int[][] dp = new int[n + 2][n + 2];
        for (int i = 1; i <= n; i++) {
            dp[i][i] = nums[i - 1] * nums[i] * nums[i + 1];
        }
        //i表示的是最右端的点
        for (int i = 1; i <= n; i++) {
            //j表示的是最左端的带你，并且j是由近到远 远离i的形式递减
            for (int j = i - 1; j >= 1; j--) {
                /*
                为什么是取最后一个打爆某个点得到结果？
                取遍所有点，都让最后一个打爆该点，这样就能达到最优结果；那如果我第一个打爆该点，第二个打爆该点呢？这样的情况都包括在【最后一个打爆其他点的里面了】

                dp只涉及到一个最优结果，但是不考虑打爆的先后顺序，我们的算法过程中也应该规避最先打哪个后打哪个的问题
                 */

                //最后一个打爆最左边的点
                int scoreL = dp[j + 1][i] + nums[j - 1] * nums[j] * nums[i + 1];
                //最后一个打爆最右边的点
                int scoreR = dp[j][i - 1] + nums[j - 1] * nums[i] * nums[i + 1];
                dp[j][i] = Math.max(scoreL, scoreR);
                //依此计算最后一个打爆中间的某个点
                for (int k = j + 1; k < i; k++) {
                    dp[j][i] = Math.max(dp[j][k - 1] + nums[j - 1] * nums[k] * nums[i + 1] + dp[k + 1][i], dp[j][i]);
                }
            }
        }
        System.out.println(dp[1][n]);
    }


}

